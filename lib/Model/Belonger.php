<?php
/**
 * Belonger
 *
 * PHP version 5
 *
 * @category Class
 * @package  Vimbox\RoomsApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vimbox-rooms
 *
 * Beta
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vimbox\RoomsApi\Model;

use \ArrayAccess;

/**
 * Belonger Class Doc Comment
 *
 * @category    Class */
/** 
 * @package     Vimbox\RoomsApi
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Belonger implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Belonger';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = array(
        'id' => 'int',
        'type' => 'string',
        'teacher_id' => 'int',
        'student_id' => 'int',
        'step_rev_id' => 'int',
        'steps_count' => 'int',
        'is_finished' => 'int'
    );

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = array(
        'id' => 'id',
        'type' => 'type',
        'teacher_id' => 'teacherId',
        'student_id' => 'studentId',
        'step_rev_id' => 'stepRevId',
        'steps_count' => 'stepsCount',
        'is_finished' => 'isFinished'
    );

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = array(
        'id' => 'setId',
        'type' => 'setType',
        'teacher_id' => 'setTeacherId',
        'student_id' => 'setStudentId',
        'step_rev_id' => 'setStepRevId',
        'steps_count' => 'setStepsCount',
        'is_finished' => 'setIsFinished'
    );

    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = array(
        'id' => 'getId',
        'type' => 'getType',
        'teacher_id' => 'getTeacherId',
        'student_id' => 'getStudentId',
        'step_rev_id' => 'getStepRevId',
        'steps_count' => 'getStepsCount',
        'is_finished' => 'getIsFinished'
    );

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = array();

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['teacher_id'] = isset($data['teacher_id']) ? $data['teacher_id'] : null;
        $this->container['student_id'] = isset($data['student_id']) ? $data['student_id'] : null;
        $this->container['step_rev_id'] = isset($data['step_rev_id']) ? $data['step_rev_id'] : null;
        $this->container['steps_count'] = isset($data['steps_count']) ? $data['steps_count'] : null;
        $this->container['is_finished'] = isset($data['is_finished']) ? $data['is_finished'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = array();
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets id
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param int $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets teacher_id
     * @return int
     */
    public function getTeacherId()
    {
        return $this->container['teacher_id'];
    }

    /**
     * Sets teacher_id
     * @param int $teacher_id
     * @return $this
     */
    public function setTeacherId($teacher_id)
    {
        $this->container['teacher_id'] = $teacher_id;

        return $this;
    }

    /**
     * Gets student_id
     * @return int
     */
    public function getStudentId()
    {
        return $this->container['student_id'];
    }

    /**
     * Sets student_id
     * @param int $student_id
     * @return $this
     */
    public function setStudentId($student_id)
    {
        $this->container['student_id'] = $student_id;

        return $this;
    }

    /**
     * Gets step_rev_id
     * @return int
     */
    public function getStepRevId()
    {
        return $this->container['step_rev_id'];
    }

    /**
     * Sets step_rev_id
     * @param int $step_rev_id
     * @return $this
     */
    public function setStepRevId($step_rev_id)
    {
        $this->container['step_rev_id'] = $step_rev_id;

        return $this;
    }

    /**
     * Gets steps_count
     * @return int
     */
    public function getStepsCount()
    {
        return $this->container['steps_count'];
    }

    /**
     * Sets steps_count
     * @param int $steps_count
     * @return $this
     */
    public function setStepsCount($steps_count)
    {
        $this->container['steps_count'] = $steps_count;

        return $this;
    }

    /**
     * Gets is_finished
     * @return int
     */
    public function getIsFinished()
    {
        return $this->container['is_finished'];
    }

    /**
     * Sets is_finished
     * @param int $is_finished
     * @return $this
     */
    public function setIsFinished($is_finished)
    {
        $this->container['is_finished'] = $is_finished;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Vimbox\RoomsApi\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Vimbox\RoomsApi\ObjectSerializer::sanitizeForSerialization($this));
    }
}


