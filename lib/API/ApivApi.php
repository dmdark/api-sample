<?php
/**
 * ApivApi
 * PHP version 5
 *
 * @category Class
 * @package  Vimbox\RoomsApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Vimbox-rooms
 *
 * Beta
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Vimbox\RoomsApi\API;

use \Vimbox\RoomsApi\Configuration;
use \Vimbox\RoomsApi\ApiClient;
use \Vimbox\RoomsApi\ApiException;
use \Vimbox\RoomsApi\ObjectSerializer;

/**
 * ApivApi Class Doc Comment
 *
 * @category Class
 * @package  Vimbox\RoomsApi
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApivApi
{

    /**
     * API Client
     *
     * @var \Vimbox\RoomsApi\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Vimbox\RoomsApi\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Vimbox\RoomsApi\ApiClient $apiClient = null)
    {
        if ($apiClient == null) {
            $apiClient = new ApiClient();
            $apiClient->getConfig()->setHost('https://rooms.vimbox.dev-v4.skyeng.link');
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Vimbox\RoomsApi\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Vimbox\RoomsApi\ApiClient $apiClient set the API client
     *
     * @return ApivApi
     */
    public function setApiClient(\Vimbox\RoomsApi\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation roomsServerApiV1WorkbooksByLessonsGet
     *
     * Return workbooks with provided lessonIds
     *
     * @param string[] $lesson_ids Lesson ids (required)
     * @param int $student_id Student id (required)
     * @return \Vimbox\RoomsApi\Model\WorkbookWithLastRoomDate[]
     * @throws \Vimbox\RoomsApi\ApiException on non-2xx response
     */
    public function roomsServerApiV1WorkbooksByLessonsGet($lesson_ids, $student_id)
    {
        list($response) = $this->roomsServerApiV1WorkbooksByLessonsGetWithHttpInfo($lesson_ids, $student_id);
        return $response;
    }

    /**
     * Operation roomsServerApiV1WorkbooksByLessonsGetWithHttpInfo
     *
     * Return workbooks with provided lessonIds
     *
     * @param string[] $lesson_ids Lesson ids (required)
     * @param int $student_id Student id (required)
     * @return Array of \Vimbox\RoomsApi\Model\WorkbookWithLastRoomDate[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Vimbox\RoomsApi\ApiException on non-2xx response
     */
    public function roomsServerApiV1WorkbooksByLessonsGetWithHttpInfo($lesson_ids, $student_id)
    {
        // verify the required parameter 'lesson_ids' is set
        if ($lesson_ids === null) {
            throw new \InvalidArgumentException('Missing the required parameter $lesson_ids when calling roomsServerApiV1WorkbooksByLessonsGet');
        }
        // verify the required parameter 'student_id' is set
        if ($student_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $student_id when calling roomsServerApiV1WorkbooksByLessonsGet');
        }
        // parse inputs
        $resourcePath = "/rooms/server-api/v1/workbooks/byLessons";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // query params
        if (is_array($lesson_ids)) {
            $lesson_ids = $this->apiClient->getSerializer()->serializeCollection($lesson_ids, 'csv', true);
        }
        if ($lesson_ids !== null) {
            $queryParams['lessonIds'] = $this->apiClient->getSerializer()->toQueryValue($lesson_ids);
        }
        // query params
        if ($student_id !== null) {
            $queryParams['studentId'] = $this->apiClient->getSerializer()->toQueryValue($student_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Vimbox\RoomsApi\Model\WorkbookWithLastRoomDate[]',
                '/rooms/server-api/v1/workbooks/byLessons'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Vimbox\RoomsApi\Model\WorkbookWithLastRoomDate[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Vimbox\RoomsApi\Model\WorkbookWithLastRoomDate[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation roomsServerApiV1WorkbooksHwFindBelongerForStudentAndStepPairsPost
     *
     * Найти \"владельца\"(ДЗ/Тест) для набора степ/студент.
     *
     * @param string $student_step_pairs  (required)
     * @return \Vimbox\RoomsApi\Model\Belonger[]
     * @throws \Vimbox\RoomsApi\ApiException on non-2xx response
     */
    public function roomsServerApiV1WorkbooksHwFindBelongerForStudentAndStepPairsPost($student_step_pairs)
    {
        list($response) = $this->roomsServerApiV1WorkbooksHwFindBelongerForStudentAndStepPairsPostWithHttpInfo($student_step_pairs);
        return $response;
    }

    /**
     * Operation roomsServerApiV1WorkbooksHwFindBelongerForStudentAndStepPairsPostWithHttpInfo
     *
     * Найти \"владельца\"(ДЗ/Тест) для набора степ/студент.
     *
     * @param string $student_step_pairs  (required)
     * @return Array of \Vimbox\RoomsApi\Model\Belonger[], HTTP status code, HTTP response headers (array of strings)
     * @throws \Vimbox\RoomsApi\ApiException on non-2xx response
     */
    public function roomsServerApiV1WorkbooksHwFindBelongerForStudentAndStepPairsPostWithHttpInfo($student_step_pairs)
    {
        // verify the required parameter 'student_step_pairs' is set
        if ($student_step_pairs === null) {
            throw new \InvalidArgumentException('Missing the required parameter $student_step_pairs when calling roomsServerApiV1WorkbooksHwFindBelongerForStudentAndStepPairsPost');
        }
        // parse inputs
        $resourcePath = "/rooms/server-api/v1/workbooks/hw/findBelongerForStudentAndStepPairs";
        $httpBody = '';
        $queryParams = array();
        $headerParams = array();
        $formParams = array();
        $_header_accept = $this->apiClient->selectHeaderAccept(array('application/json'));
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(array('application/x-www-form-urlencoded'));

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($student_step_pairs)) {
            $_tempBody = $student_step_pairs;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires HTTP basic authentication
        if (strlen($this->apiClient->getConfig()->getUsername()) !== 0 or strlen($this->apiClient->getConfig()->getPassword()) !== 0) {
            $headerParams['Authorization'] = 'Basic ' . base64_encode($this->apiClient->getConfig()->getUsername() . ":" . $this->apiClient->getConfig()->getPassword());
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Vimbox\RoomsApi\Model\Belonger[]',
                '/rooms/server-api/v1/workbooks/hw/findBelongerForStudentAndStepPairs'
            );

            return array($this->apiClient->getSerializer()->deserialize($response, '\Vimbox\RoomsApi\Model\Belonger[]', $httpHeader), $statusCode, $httpHeader);
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Vimbox\RoomsApi\Model\Belonger[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

}
